{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    items: [{\n      id: \"m1\",\n      name: \"Sushi\",\n      description: \"Finest fish and veggies\",\n      price: 22.99\n    }, {\n      id: \"m2\",\n      name: \"Schnitzel\",\n      description: \"A german specialty!\",\n      price: 16.5\n    }, {\n      id: \"m3\",\n      name: \"Barbecue Burger\",\n      description: \"American, raw, meaty\",\n      price: 12.99\n    }, {\n      id: \"m4\",\n      name: \"cake\",\n      description: \"dilicious\",\n      price: \"33\"\n    }],\n    totalAmount: 0\n  },\n  reducers: {\n    addItemHandler(currentState, action) {\n      const newItem = action.payload;\n      currentState.totalAmount = currentState.totalAmount + newItem.price * newItem.amount;\n      const existingCartItemIndex = currentState.items.findIndex(item => item.id === newItem.id);\n      const existingCartItem = currentState.items[existingCartItemIndex];\n      let updateCartItems;\n      if (existingCartItem) {\n        const updateItemAmt = {\n          ...existingCartItem,\n          amount: existingCartItem.amount + newItem.amount\n        };\n        updateCartItems = [...currentState.items];\n        currentState.items[existingCartItemIndex] = updateItemAmt;\n      } else {\n        currentState.items.push({\n          id: newItem.id,\n          name: newItem.name,\n          descr\n        });\n      }\n    }\n  }\n});\nexport const cartSliceAction = cartSlice.actions;\nexport default cartSlice;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","items","id","description","price","totalAmount","reducers","addItemHandler","currentState","action","newItem","payload","amount","existingCartItemIndex","findIndex","item","existingCartItem","updateCartItems","updateItemAmt","push","descr","cartSliceAction","actions"],"sources":["C:/Users/HABEEB SHOLANKE/Desktop/foodapp/src/store/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState: {\r\n    items: [\r\n        {\r\n            id: \"m1\",\r\n            name: \"Sushi\",\r\n            description: \"Finest fish and veggies\",\r\n            price: 22.99,\r\n          },\r\n          {\r\n            id: \"m2\",\r\n            name: \"Schnitzel\",\r\n            description: \"A german specialty!\",\r\n            price: 16.5,\r\n          },\r\n          {\r\n            id: \"m3\",\r\n            name: \"Barbecue Burger\",\r\n            description: \"American, raw, meaty\",\r\n            price: 12.99,\r\n          },\r\n          {\r\n            id: \"m4\",\r\n            name: \"cake\",\r\n            description: \"dilicious\",\r\n            price: \"33\",\r\n          },\r\n    ],\r\n    totalAmount: 0,\r\n  },\r\n  reducers: {\r\n    addItemHandler(currentState, action) {\r\n      const newItem = action.payload;\r\n      currentState.totalAmount =\r\n        currentState.totalAmount + newItem.price * newItem.amount;\r\n\r\n      const existingCartItemIndex = currentState.items.findIndex(\r\n        (item) => item.id === newItem.id\r\n      );\r\n\r\n      const existingCartItem = currentState.items[existingCartItemIndex];\r\n\r\n      let updateCartItems;\r\n      if (existingCartItem) {\r\n        const updateItemAmt = {\r\n          ...existingCartItem,\r\n          amount: existingCartItem.amount + newItem.amount,\r\n        };\r\n        updateCartItems = [...currentState.items];\r\n        currentState.items[existingCartItemIndex] = updateItemAmt;\r\n      } else {\r\n        currentState.items.push({\r\n            id:newItem.id,\r\n            name:newItem.name,\r\n            descr\r\n        });\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const cartSliceAction = cartSlice.actions;\r\n\r\nexport default cartSlice;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,SAAS,GAAGD,WAAW,CAAC;EAC5BE,IAAI,EAAE,MAAM;EACZC,YAAY,EAAE;IACZC,KAAK,EAAE,CACH;MACIC,EAAE,EAAE,IAAI;MACRH,IAAI,EAAE,OAAO;MACbI,WAAW,EAAE,yBAAyB;MACtCC,KAAK,EAAE;IACT,CAAC,EACD;MACEF,EAAE,EAAE,IAAI;MACRH,IAAI,EAAE,WAAW;MACjBI,WAAW,EAAE,qBAAqB;MAClCC,KAAK,EAAE;IACT,CAAC,EACD;MACEF,EAAE,EAAE,IAAI;MACRH,IAAI,EAAE,iBAAiB;MACvBI,WAAW,EAAE,sBAAsB;MACnCC,KAAK,EAAE;IACT,CAAC,EACD;MACEF,EAAE,EAAE,IAAI;MACRH,IAAI,EAAE,MAAM;MACZI,WAAW,EAAE,WAAW;MACxBC,KAAK,EAAE;IACT,CAAC,CACN;IACDC,WAAW,EAAE;EACf,CAAC;EACDC,QAAQ,EAAE;IACRC,cAAc,CAACC,YAAY,EAAEC,MAAM,EAAE;MACnC,MAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO;MAC9BH,YAAY,CAACH,WAAW,GACtBG,YAAY,CAACH,WAAW,GAAGK,OAAO,CAACN,KAAK,GAAGM,OAAO,CAACE,MAAM;MAE3D,MAAMC,qBAAqB,GAAGL,YAAY,CAACP,KAAK,CAACa,SAAS,CACvDC,IAAI,IAAKA,IAAI,CAACb,EAAE,KAAKQ,OAAO,CAACR,EAAE,CACjC;MAED,MAAMc,gBAAgB,GAAGR,YAAY,CAACP,KAAK,CAACY,qBAAqB,CAAC;MAElE,IAAII,eAAe;MACnB,IAAID,gBAAgB,EAAE;QACpB,MAAME,aAAa,GAAG;UACpB,GAAGF,gBAAgB;UACnBJ,MAAM,EAAEI,gBAAgB,CAACJ,MAAM,GAAGF,OAAO,CAACE;QAC5C,CAAC;QACDK,eAAe,GAAG,CAAC,GAAGT,YAAY,CAACP,KAAK,CAAC;QACzCO,YAAY,CAACP,KAAK,CAACY,qBAAqB,CAAC,GAAGK,aAAa;MAC3D,CAAC,MAAM;QACLV,YAAY,CAACP,KAAK,CAACkB,IAAI,CAAC;UACpBjB,EAAE,EAACQ,OAAO,CAACR,EAAE;UACbH,IAAI,EAACW,OAAO,CAACX,IAAI;UACjBqB;QACJ,CAAC,CAAC;MACJ;IACF;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAGvB,SAAS,CAACwB,OAAO;AAEhD,eAAexB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}